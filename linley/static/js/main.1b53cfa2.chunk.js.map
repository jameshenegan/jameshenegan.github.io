{"version":3,"sources":["01.mp3","02.mp3","03.mp3","04.mp3","Game.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","audio1","UIfx","audioFile1","audio2","audioFile2","audio3","audioFile3","audio4","audioFile4","Game","props","initialState","useState","array","setArray","length","leftToGo","setLeftToGo","foundMonsters","setFoundMonsters","useEffect","leftToClick","filter","element","clicked","handleClick","index","map","innerIndex","play","playSound","push","renderList","key","className","alt","src","width","onClick","renderHeader","numberUserClicked","numberOfItemsToPass","handlePlayAgain","App","gamesWon","setGamesWon","setInitialState","setNumberOfItemsToPass","makeNewGame","numberOfItems","parseInt","Math","floor","random","newState","j","newLocation","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,qOCOrCC,EAAS,IAAIC,IAAKC,KAClBC,EAAS,IAAIF,IAAKG,KAClBC,EAAS,IAAIJ,IAAKK,KAClBC,EAAS,IAAIN,IAAKO,KA0JTC,EAxJF,SAACC,GACZ,IAAMC,EAAeD,EAAMC,aADL,EAEIC,mBAASD,GAFb,mBAEfE,EAFe,KAERC,EAFQ,OAGUF,mBAASD,EAAaI,QAHhC,mBAGfC,EAHe,KAGLC,EAHK,OAIoBL,mBAAS,IAJ7B,mBAIfM,EAJe,KAIAC,EAJA,KAMtBC,qBAAU,WACR,IAAMC,EAAcR,EAAMS,QAAO,SAACC,GAAD,OAAcA,EAAQC,WACvDP,EAAYI,EAAYN,UACvB,CAACF,IAEJO,qBAAU,WACRN,EAASJ,EAAMC,cACfM,EAAYP,EAAMC,aAAaI,QAC/BI,EAAiB,MAChB,CAACT,IAEJ,IA2BMe,EAAc,SAACC,GACnBZ,EACED,EAAMc,KAAI,SAACJ,EAASK,GAClB,OAAIA,IAAeF,GA9BP,SAACA,GACjB,OAAQA,GACN,KAAK,EACL,KAAK,EACL,KAAK,EACH1B,EAAO6B,KAAK,KACZ,MACF,KAAK,EACL,KAAK,EACL,KAAK,EACH1B,EAAO0B,KAAK,KACZ,MACF,KAAK,EACL,KAAK,EACL,KAAK,GACHxB,EAAOwB,KAAK,KACZ,MACF,KAAK,EACL,KAAK,EACL,KAAK,GACHtB,EAAOsB,KAAK,KACZ,MACF,QACE7B,EAAO6B,KAAK,MAQVC,CAAUJ,GACVR,EAAca,KAAKL,GACZ,CAAEF,SAAS,IAEXD,OAMTS,EAAa,WACjB,OAAOnB,EAAMc,KAAI,SAACJ,EAASG,GACzB,OAAIH,EAAQC,QAER,yBAAKS,IAAKP,EAAOQ,UAAU,UACzB,yBACEC,IAAI,UACJC,IAAG,+BAA0BV,EAA1B,aACHW,MAAM,SAMV,yBACEJ,IAAKP,EACLY,QAAS,kBAAMb,EAAYC,IAC3BQ,UAAU,UAEV,yBACEC,IAAI,UACJC,IAAG,+BAA0BV,EAA1B,aACHW,MAAM,aAQZE,EAAe,WACnB,IACMC,EADuB9B,EAAM+B,oBAEV5B,EAAMS,QAAO,SAACC,GAAD,OAAcA,EAAQC,WAAST,OAErE,OAAiB,IAAbC,EAEA,6BACE,yBAAKkB,UAAU,cACb,oDAEF,yBAAKA,UAAU,cACb,4BACGM,EAAmB,IACnBtB,EAAcS,KAAI,SAACD,GAAD,OACjB,yBAAKO,IAAKP,EAAOQ,UAAU,UACzB,yBACEC,IAAI,UACJC,IAAG,+BAA0BV,EAA1B,aACHW,MAAM,YAKd,yBAAKH,UAAU,aAMnB,6BACE,yBAAKA,UAAU,cACb,gEAEF,yBAAKA,UAAU,cACb,4BAAKM,MAMf,OAAiB,IAAbxB,EAEA,6BACGuB,IACD,yBAAKL,UAAU,OAAOF,KAEtB,yBAAKE,UAAU,cACb,4BAAQI,QAAS5B,EAAMgC,gBAAiBR,UAAU,OAAlD,gBAQJ,6BACGK,IACD,yBAAKL,UAAU,OAAOF,OCtGfW,EApDH,WAEV,IAFgB,EAOgB/B,mBAAS,GAPzB,mBAOTgC,EAPS,KAOCC,EAPD,OAQwBjC,mBAAS,IARjC,mBAQTD,EARS,KAQKmC,EARL,OASsClC,mBAAS,GAT/C,mBAST6B,EATS,KASYM,EATZ,KAWVC,EAAc,WAClB,IAAMC,EAAgBC,SAASC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,GAC/DN,EAAuBE,GAEvB,IADA,IAAMK,EAAW,GACRC,EAAI,EAAGA,EAAIN,EAAeM,IACjCD,EAASvB,KAAK,CAAEP,SAAS,IAQ3B,KAAO8B,EAASvC,OAAS,IAAI,CAC3B,IAAMyC,EAAcN,SAASC,KAAKC,MAAMD,KAAKE,SAAWC,EAASvC,SACjEuC,EAASG,OAAOD,EAAa,EAAG,CAAEhC,SAAS,IAG7CsB,EAAgBQ,IAOlB,OAJAlC,qBAAU,WACR4B,MACC,IAEyB,IAAxBrC,EAAaI,OACR,8BAGL,yBAAKmB,UAAU,aACb,kBAAC,EAAD,CACEvB,aAAcA,EACd+B,gBAzCgB,WACtBG,EAAYD,EAAW,GACvBI,KAwCMP,oBAAqBA,IAEvB,uBAAGP,UAAU,UAAb,eAAmCU,KCtCvBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1b53cfa2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/01.fc68cc81.mp3\";","module.exports = __webpack_public_path__ + \"static/media/02.7b522aa5.mp3\";","module.exports = __webpack_public_path__ + \"static/media/03.ee1490a3.mp3\";","module.exports = __webpack_public_path__ + \"static/media/04.0a6941f7.mp3\";","import React, { useState, useEffect } from \"react\";\r\nimport UIfx from \"uifx\";\r\nimport audioFile1 from \"./01.mp3\";\r\nimport audioFile2 from \"./02.mp3\";\r\nimport audioFile3 from \"./03.mp3\";\r\nimport audioFile4 from \"./04.mp3\";\r\n\r\nconst audio1 = new UIfx(audioFile1);\r\nconst audio2 = new UIfx(audioFile2);\r\nconst audio3 = new UIfx(audioFile3);\r\nconst audio4 = new UIfx(audioFile4);\r\n\r\nconst Game = (props) => {\r\n  const initialState = props.initialState;\r\n  const [array, setArray] = useState(initialState);\r\n  const [leftToGo, setLeftToGo] = useState(initialState.length);\r\n  const [foundMonsters, setFoundMonsters] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const leftToClick = array.filter((element) => !element.clicked);\r\n    setLeftToGo(leftToClick.length);\r\n  }, [array]);\r\n\r\n  useEffect(() => {\r\n    setArray(props.initialState);\r\n    setLeftToGo(props.initialState.length);\r\n    setFoundMonsters([]);\r\n  }, [props]);\r\n\r\n  const playSound = (index) => {\r\n    switch (index) {\r\n      case 0:\r\n      case 4:\r\n      case 8:\r\n        audio1.play(0.25);\r\n        break;\r\n      case 1:\r\n      case 5:\r\n      case 9:\r\n        audio2.play(0.25);\r\n        break;\r\n      case 2:\r\n      case 6:\r\n      case 10:\r\n        audio3.play(0.25);\r\n        break;\r\n      case 3:\r\n      case 7:\r\n      case 11:\r\n        audio4.play(0.25);\r\n        break;\r\n      default:\r\n        audio1.play(0.25);\r\n    }\r\n  };\r\n\r\n  const handleClick = (index) => {\r\n    setArray(\r\n      array.map((element, innerIndex) => {\r\n        if (innerIndex === index) {\r\n          playSound(index);\r\n          foundMonsters.push(index);\r\n          return { clicked: true };\r\n        } else {\r\n          return element;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const renderList = () => {\r\n    return array.map((element, index) => {\r\n      if (element.clicked) {\r\n        return (\r\n          <div key={index} className=\"col s3\">\r\n            <img\r\n              alt=\"monster\"\r\n              src={`https://robohash.org/${index}?set=set4`}\r\n              width=\"100\"\r\n            ></img>\r\n          </div>\r\n        );\r\n      } else {\r\n        return (\r\n          <div\r\n            key={index}\r\n            onClick={() => handleClick(index)}\r\n            className=\"col s3\"\r\n          >\r\n            <img\r\n              alt=\"monster\"\r\n              src={`https://robohash.org/${index}?set=set2`}\r\n              width=\"100\"\r\n            ></img>\r\n          </div>\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  const renderHeader = () => {\r\n    const numberAlreadyClicked = props.numberOfItemsToPass;\r\n    const numberUserClicked =\r\n      numberAlreadyClicked - array.filter((element) => !element.clicked).length;\r\n\r\n    if (leftToGo === 0) {\r\n      return (\r\n        <div>\r\n          <div className=\"row center\">\r\n            <h3>You found them all!</h3>\r\n          </div>\r\n          <div className=\"row center\">\r\n            <h2>\r\n              {numberUserClicked}{\" \"}\r\n              {foundMonsters.map((index) => (\r\n                <div key={index} className=\"col s1\">\r\n                  <img\r\n                    alt=\"monster\"\r\n                    src={`https://robohash.org/${index}?set=set2`}\r\n                    width=\"50\"\r\n                  ></img>\r\n                </div>\r\n              ))}\r\n            </h2>\r\n            <div className=\"center\"></div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <div className=\"row center\">\r\n            <h3>How many monsters can you find?</h3>\r\n          </div>\r\n          <div className=\"row center\">\r\n            <h2>{numberUserClicked}</h2>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n  if (leftToGo === 0) {\r\n    return (\r\n      <div>\r\n        {renderHeader()}\r\n        <div className=\"row\">{renderList()}</div>\r\n\r\n        <div className=\"row center\">\r\n          <button onClick={props.handlePlayAgain} className=\"btn\">\r\n            Play Again\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        {renderHeader()}\r\n        <div className=\"row\">{renderList()}</div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Game;\r\n","import React, { useState, useEffect } from \"react\";\n\nimport Game from \"./Game\";\n\nconst App = () => {\n  // restart the game:\n  const handlePlayAgain = () => {\n    setGamesWon(gamesWon + 1);\n    makeNewGame();\n  };\n\n  const [gamesWon, setGamesWon] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [numberOfItemsToPass, setNumberOfItemsToPass] = useState(0);\n\n  const makeNewGame = () => {\n    const numberOfItems = parseInt(Math.floor(Math.random() * 8) + 2);\n    setNumberOfItemsToPass(numberOfItems);\n    const newState = [];\n    for (let j = 0; j < numberOfItems; j++) {\n      newState.push({ clicked: false });\n    }\n\n    // add empty spaces to the array\n    // while the length of the array is less than 12\n    // get a random index\n    // splice a value in\n\n    while (newState.length < 12) {\n      const newLocation = parseInt(Math.floor(Math.random() * newState.length));\n      newState.splice(newLocation, 0, { clicked: true });\n    }\n\n    setInitialState(newState);\n  };\n\n  useEffect(() => {\n    makeNewGame();\n  }, []);\n\n  if (initialState.length === 0) {\n    return <div></div>;\n  } else {\n    return (\n      <div className=\"container\">\n        <Game\n          initialState={initialState}\n          handlePlayAgain={handlePlayAgain}\n          numberOfItemsToPass={numberOfItemsToPass}\n        ></Game>\n        <p className=\"center\"> Games Won: {gamesWon}</p>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"materialize-css/dist/css/materialize.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}